plugins {
    id "java"
    id "org.jetbrains.kotlin.jvm" version "1.7.10"
    id "edu.wpi.first.GradleRIO" version "2023.4.2"
}

def javaVersion = JavaVersion.VERSION_17
sourceCompatibility = javaVersion
targetCompatibility = javaVersion

def ROBOT_MAIN_CLASS = "com.igknighters.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = true


compileKotlin {
    kotlinOptions {
        jvmTarget = javaVersion.toString()
    }
}

test {
    useJUnitPlatform()
}

dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    implementation platform("org.junit:junit-bom:5.8.2")
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.junit.jupiter:junit-jupiter-params"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"

    implementation "gov.nist.math:jama:1.0.3"
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

tasks.register("writeHostname") {
    if (System.getenv("CI") == "true") return
    // Define an output stream to write to instead of terminal
    def stdout = new ByteArrayOutputStream()

    // Execute the git command
    exec {
        commandLine "hostname"
        // Write to the output stream instead of terminal
        standardOutput = stdout
    }

    // Parse the output into a string
    def hostname = stdout.toString().trim()

    // Create a new file
    new File(
            // Join project directory and deploy directory
            projectDir.toString() + "/src/main/deploy",
            // File name to write to
            "hostname.txt"
    ).text = hostname // Set the contents of the file to the variable branch
}

deploy.targets.roborio.artifacts.frcStaticFileDeploy.dependsOn(writeHostname)

tasks.register("writeGitUser") {
    if (System.getenv("CI") == "true") return
    // Define an output stream to write to instead of terminal
    def stdout = new ByteArrayOutputStream()

    // Execute the git command
    exec {
        commandLine "git", "config", "user.name"
        // Write to the output stream instead of terminal
        standardOutput = stdout
    }

    // Parse the output into a string
    def user = stdout.toString().trim()

    // Create a new file
    new File(
            // Join project directory and deploy directory
            projectDir.toString() + "/src/main/deploy",
            // File name to write to
            "user.txt"
    ).text = user // Set the contents of the file to the variable branch
}

deploy.targets.roborio.artifacts.frcStaticFileDeploy.dependsOn(writeGitUser)

tasks.register("writeBranchName") {
    if (System.getenv("CI") == "true") return
    // Define an output stream to write to instead of terminal
    def stdout = new ByteArrayOutputStream()

    // Execute the git command
    exec {
        commandLine "git", "rev-parse", "--abbrev-ref", "HEAD"
        // Write to the output stream instead of terminal
        standardOutput = stdout
    }

    // Parse the output into a string
    def branch = stdout.toString().trim()

    // Create a new file
    new File(
            // Join project directory and deploy directory
            projectDir.toString() + "/src/main/deploy",
            // File name to write to
            "branch.txt"
    ).text = branch // Set the contents of the file to the variable branch
}

deploy.targets.roborio.artifacts.frcStaticFileDeploy.dependsOn(writeBranchName)

tasks.register("writeCommitHash") {
    if (System.getenv("CI") == "true") return
    def stdout = new ByteArrayOutputStream()

    exec {
        commandLine "git", "rev-parse", "--short", "HEAD"
        standardOutput = stdout
    }

    def commitHash = stdout.toString().trim()

    def stdout2 = new ByteArrayOutputStream()

    exec {
        commandLine "git", "status", "-s"
        standardOutput = stdout2
    }

    def dirty = stdout2.toString().isEmpty() ? "" : "(dirty)"

    def combined = commitHash + " " + dirty

    new File(
            projectDir.toString() + "/src/main/deploy",
            "commit.txt"
    ).text = combined
}

deploy.targets.roborio.artifacts.frcStaticFileDeploy.dependsOn(writeCommitHash)
